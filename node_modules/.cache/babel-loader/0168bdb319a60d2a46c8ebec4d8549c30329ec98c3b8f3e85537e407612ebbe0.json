{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chemv\\\\OneDrive\\\\Documents\\\\GitHub\\\\React\\\\test-task-tweetcards\\\\test-task-tweetcards\\\\src\\\\components\\\\Card\\\\Card.jsx\",\n  _s = $RefreshSig$();\nimport PropTypes from 'prop-types';\nimport { toggleFollow } from 'redux/following/followSlice';\nimport { updateUser, fetchUsers } from 'redux/users/operations';\n// import {selectIsFollowed} from 'redux/following/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { store } from \"redux/store.js\";\nimport { changeFollowers } from 'redux/users/usersSlice';\nimport css from './Card.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = _ref => {\n  _s();\n  let {\n    user,\n    id,\n    avatar,\n    followers,\n    tweets,\n    isFollowed\n  } = _ref;\n  const dispatch = useDispatch();\n  // const followed=useSelector((state) => state.follow[id]);\n  const state = store.getState();\n  const limit = state.currentLimit.limit;\n  const updatedIsFollowed = !isFollowed;\n  const updatedFollowers = isFollowed ? followers -= 1 : followers += 1;\n  const handleClick = () => {\n    dispatch(toggleFollow(id));\n    dispatch(updateUser({\n      id,\n      updatedFollowers,\n      updatedIsFollowed\n    }));\n    dispatch(fetchUsers(limit));\n    // dispatch(changeFollowers({ id, followers:followers + (followed ? -1 : 1) }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.card,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: avatar,\n      alt: user,\n      className: css.avatar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: css.name,\n      children: [tweets, \" tweets\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: css.followers,\n      children: [followers, \" followers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        handleClick(id);\n      },\n      style: {\n        backgroundColor: isFollowed ? '#5CD3A8' : '#EBD8FF'\n      },\n      children: isFollowed ? 'Following' : 'Follow'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Card, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = Card;\nCard.propTypes = {\n  user: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  tweets: PropTypes.number.isRequired,\n  followers: PropTypes.number.isRequired,\n  id: PropTypes.string.isRequired\n};\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["PropTypes","toggleFollow","updateUser","fetchUsers","useSelector","useDispatch","store","changeFollowers","css","jsxDEV","_jsxDEV","Card","_ref","_s","user","id","avatar","followers","tweets","isFollowed","dispatch","state","getState","limit","currentLimit","updatedIsFollowed","updatedFollowers","handleClick","className","card","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","style","backgroundColor","_c","propTypes","string","isRequired","number","$RefreshReg$"],"sources":["C:/Users/chemv/OneDrive/Documents/GitHub/React/test-task-tweetcards/test-task-tweetcards/src/components/Card/Card.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport {toggleFollow} from 'redux/following/followSlice';\r\nimport { updateUser, fetchUsers } from 'redux/users/operations';\r\n// import {selectIsFollowed} from 'redux/following/selectors';\r\nimport { useSelector, useDispatch  } from 'react-redux';\r\nimport { store } from \"redux/store.js\";\r\nimport { changeFollowers } from 'redux/users/usersSlice';\r\nimport css from './Card.module.css';\r\n\r\n const Card = ({\r\n    user,\r\n    id,\r\n    avatar,\r\n    followers,\r\n    tweets,\r\n    isFollowed\r\n    }) => {\r\n        const dispatch=useDispatch();\r\n        // const followed=useSelector((state) => state.follow[id]);\r\n        const state = store.getState();\r\n        const limit=state.currentLimit.limit;\r\n\r\n\r\n        const updatedIsFollowed = !isFollowed;\r\n    const updatedFollowers = isFollowed\r\n      ? (followers -= 1)\r\n      : (followers += 1);\r\n    \r\n        const handleClick = () => {\r\n      \r\n            dispatch(toggleFollow(id));\r\n            dispatch(updateUser({id,updatedFollowers,updatedIsFollowed }));\r\n            dispatch(fetchUsers(limit));\r\n            // dispatch(changeFollowers({ id, followers:followers + (followed ? -1 : 1) }));\r\n                \r\n          };\r\n        \r\n    return (\r\n        <div className={css.card}>\r\n \r\n    <img\r\n      src={avatar}\r\n      alt={user}\r\n      className={css.avatar} \r\n    />\r\n    <p className={css.name}>{tweets} tweets</p>\r\n    <p className={css.followers}>{followers} followers</p>\r\n    <button className='button' onClick={()=>{handleClick(id)}} style={{ backgroundColor: isFollowed ? '#5CD3A8' : '#EBD8FF' }}>\r\n        {isFollowed ? 'Following' : 'Follow'}\r\n      </button>\r\n\r\n</div>\r\n    );\r\n};\r\n\r\nCard.propTypes={\r\n    user: PropTypes.string.isRequired,\r\n    avatar: PropTypes.string.isRequired,\r\n    tweets: PropTypes.number.isRequired,\r\n    followers: PropTypes.number.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n}\r\nexport default Card;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}