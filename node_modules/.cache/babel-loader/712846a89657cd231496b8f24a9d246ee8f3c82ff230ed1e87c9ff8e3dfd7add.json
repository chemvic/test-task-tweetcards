{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chemv\\\\OneDrive\\\\Documents\\\\GitHub\\\\React\\\\test-task-tweetcards\\\\test-task-tweetcards\\\\src\\\\components\\\\Card\\\\Card.jsx\",\n  _s = $RefreshSig$();\nimport PropTypes from 'prop-types';\n// import {toggleFollow} from 'redux/following/followSlice';\nimport { updateUser, fetchUsers } from 'redux/users/operations';\n// import {selectIsFollowed} from 'redux/following/selectors';\nimport { useDispatch } from 'react-redux';\nimport { store } from \"redux/store.js\";\nimport logo from 'images/Logo.png';\nimport decor from 'images/decor.png';\nimport css from './Card.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = _ref => {\n  _s();\n  let {\n    user,\n    id,\n    avatar,\n    followers,\n    tweets,\n    isFollowed\n  } = _ref;\n  const dispatch = useDispatch();\n  // const followed=useSelector((state) => state.follow[id]);\n  const state = store.getState();\n  const limit = state.currentLimit.limit;\n  const updatedIsFollowed = !isFollowed;\n  const updatedFollowers = isFollowed ? followers += 1 : followers -= 1;\n  const handleClick = () => {\n    // dispatch(toggleFollow(id));\n    dispatch(updateUser({\n      id,\n      updatedFollowers,\n      updatedIsFollowed\n    }));\n    dispatch(fetchUsers(limit));\n    // dispatch(changeFollowers({ id, followers:followers + (followed ? -1 : 1) }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.card,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: css.logo,\n      src: logo,\n      width: \"76\",\n      alt: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.avatar,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: avatar,\n        alt: user,\n        width: \"75\",\n        height: \"75\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: css.tweets,\n      children: [tweets, \" tweets\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: css.followers,\n      children: [followers, \" followers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        handleClick(id);\n      },\n      style: {\n        backgroundColor: isFollowed ? '#5CD3A8' : '#EBD8FF'\n      },\n      children: isFollowed ? 'Following' : 'Follow'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(Card, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = Card;\nCard.propTypes = {\n  user: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  tweets: PropTypes.number.isRequired,\n  followers: PropTypes.number.isRequired,\n  id: PropTypes.string.isRequired\n};\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["PropTypes","updateUser","fetchUsers","useDispatch","store","logo","decor","css","jsxDEV","_jsxDEV","Card","_ref","_s","user","id","avatar","followers","tweets","isFollowed","dispatch","state","getState","limit","currentLimit","updatedIsFollowed","updatedFollowers","handleClick","className","card","children","src","width","alt","fileName","_jsxFileName","lineNumber","columnNumber","height","onClick","style","backgroundColor","_c","propTypes","string","isRequired","number","$RefreshReg$"],"sources":["C:/Users/chemv/OneDrive/Documents/GitHub/React/test-task-tweetcards/test-task-tweetcards/src/components/Card/Card.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\n// import {toggleFollow} from 'redux/following/followSlice';\r\nimport { updateUser, fetchUsers } from 'redux/users/operations';\r\n// import {selectIsFollowed} from 'redux/following/selectors';\r\nimport { useDispatch  } from 'react-redux';\r\nimport { store } from \"redux/store.js\";\r\nimport logo from 'images/Logo.png';\r\nimport decor from 'images/decor.png';\r\nimport css from './Card.module.css';\r\n\r\n const Card = ({\r\n    user,\r\n    id,\r\n    avatar,\r\n    followers,\r\n    tweets,\r\n    isFollowed\r\n    }) => {\r\n        const dispatch=useDispatch();\r\n        // const followed=useSelector((state) => state.follow[id]);\r\n        const state = store.getState();\r\n        const limit=state.currentLimit.limit;\r\n\r\n\r\n        const updatedIsFollowed = !isFollowed;\r\n    const updatedFollowers = isFollowed\r\n      ? (followers += 1)\r\n      : (followers -= 1);\r\n    \r\n        const handleClick = () => {\r\n      \r\n            // dispatch(toggleFollow(id));\r\n            dispatch(updateUser({id,updatedFollowers,updatedIsFollowed }));\r\n            dispatch(fetchUsers(limit));\r\n            // dispatch(changeFollowers({ id, followers:followers + (followed ? -1 : 1) }));\r\n                \r\n          };\r\n        \r\n    return (\r\n        <div className={css.card}>\r\n             <img className={css.logo} src={logo} width=\"76\" alt=\"logo\" />\r\n         \r\n \r\n             <div className={css.avatar}>\r\n                 <img src={avatar} alt={user} width=\"75\" height=\"75\" />\r\n             </div>\r\n\r\n    <p className={css.tweets}>{tweets} tweets</p>\r\n    <p className={css.followers}>{followers} followers</p>\r\n    <button className='button' onClick={()=>{handleClick(id)}} style={{ backgroundColor: isFollowed ? '#5CD3A8' : '#EBD8FF' }}>\r\n        {isFollowed ? 'Following' : 'Follow'}\r\n      </button>\r\n\r\n</div>\r\n    );\r\n};\r\n\r\nCard.propTypes={\r\n    user: PropTypes.string.isRequired,\r\n    avatar: PropTypes.string.isRequired,\r\n    tweets: PropTypes.number.isRequired,\r\n    followers: PropTypes.number.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n}\r\nexport default Card;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}