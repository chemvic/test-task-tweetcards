{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chemv\\\\OneDrive\\\\Documents\\\\GitHub\\\\React\\\\test-task-tweetcards\\\\test-task-tweetcards\\\\src\\\\components\\\\Card\\\\Card.jsx\",\n  _s = $RefreshSig$();\nimport PropTypes from 'prop-types';\nimport { toggleFollow } from 'redux/following/followSlice';\nimport { updateUser } from 'redux/users/operations';\n// import {selectIsFollowed} from 'redux/following/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFollowers } from 'redux/users/usersSlice';\nimport css from './Card.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = _ref => {\n  _s();\n  let {\n    user,\n    id,\n    avatar,\n    followers,\n    tweets,\n    isFollowed\n  } = _ref;\n  const dispatch = useDispatch();\n  const followed = useSelector(state => state.follow[id]);\n\n  // let newData={};\n\n  // if(!isFollowed){\n  //     newData={\n  //         updatedFollowers: followers +1,\n  //         updatedIsFollowed: true,\n  // }\n  // }else{\n  //     newData={\n\n  //             followers:followers - 1,\n  //             isFollowed: false,\n\n  // }}\n\n  const updatedIsFollowed = !isFollowed;\n  const updatedFollowers = isFollowed ? followers += 1 : followers -= 1;\n  const handleClick = () => {\n    dispatch(toggleFollow(id));\n    dispatch(updateUser({\n      id,\n      updatedFollowers,\n      updatedIsFollowed\n    }));\n\n    // dispatch(changeFollowers({ id, followers:followers + (followed ? -1 : 1) }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.card,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: avatar,\n      alt: user,\n      className: css.avatar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: css.name,\n      children: [tweets, \" tweets\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: css.followers,\n      children: [followers, \" followers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        handleClick(id);\n      },\n      style: {\n        backgroundColor: isFollowed ? '#5CD3A8' : '#EBD8FF'\n      },\n      children: followed ? 'Following' : 'Follow'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(Card, \"xfsG9hs9ITMYFF+VDstRsdoIKC8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Card;\nCard.propTypes = {\n  user: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  tweets: PropTypes.number.isRequired,\n  followers: PropTypes.number.isRequired,\n  id: PropTypes.string.isRequired\n};\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["PropTypes","toggleFollow","updateUser","useSelector","useDispatch","changeFollowers","css","jsxDEV","_jsxDEV","Card","_ref","_s","user","id","avatar","followers","tweets","isFollowed","dispatch","followed","state","follow","updatedIsFollowed","updatedFollowers","handleClick","className","card","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","style","backgroundColor","_c","propTypes","string","isRequired","number","$RefreshReg$"],"sources":["C:/Users/chemv/OneDrive/Documents/GitHub/React/test-task-tweetcards/test-task-tweetcards/src/components/Card/Card.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport {toggleFollow} from 'redux/following/followSlice';\r\nimport { updateUser } from 'redux/users/operations';\r\n// import {selectIsFollowed} from 'redux/following/selectors';\r\nimport { useSelector, useDispatch  } from 'react-redux';\r\nimport { changeFollowers } from 'redux/users/usersSlice';\r\nimport css from './Card.module.css';\r\n\r\n const Card = ({\r\n    user,\r\n    id,\r\n    avatar,\r\n    followers,\r\n    tweets,\r\n    isFollowed\r\n    }) => {\r\n        const dispatch=useDispatch();\r\n        const followed=useSelector((state) => state.follow[id]);\r\n\r\n        // let newData={};\r\n\r\n        // if(!isFollowed){\r\n        //     newData={\r\n        //         updatedFollowers: followers +1,\r\n        //         updatedIsFollowed: true,\r\n        // }\r\n        // }else{\r\n        //     newData={\r\n                \r\n        //             followers:followers - 1,\r\n        //             isFollowed: false,\r\n            \r\n        // }}\r\n\r\n        const updatedIsFollowed = !isFollowed;\r\n    const updatedFollowers = isFollowed\r\n      ? (followers += 1)\r\n      : (followers -= 1);\r\n    \r\n        const handleClick = () => {\r\n      \r\n            dispatch(toggleFollow(id));\r\n            dispatch(updateUser({id,updatedFollowers,updatedIsFollowed }));\r\n           \r\n            // dispatch(changeFollowers({ id, followers:followers + (followed ? -1 : 1) }));\r\n                \r\n          };\r\n        \r\n    return (\r\n        <div className={css.card}>\r\n \r\n    <img\r\n      src={avatar}\r\n      alt={user}\r\n      className={css.avatar} \r\n    />\r\n    <p className={css.name}>{tweets} tweets</p>\r\n    <p className={css.followers}>{followers} followers</p>\r\n    <button className='button' onClick={()=>{handleClick(id)}} style={{ backgroundColor: isFollowed ? '#5CD3A8' : '#EBD8FF' }}>\r\n        {followed ? 'Following' : 'Follow'}\r\n      </button>\r\n\r\n</div>\r\n    );\r\n};\r\n\r\nCard.propTypes={\r\n    user: PropTypes.string.isRequired,\r\n    avatar: PropTypes.string.isRequired,\r\n    tweets: PropTypes.number.isRequired,\r\n    followers: PropTypes.number.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n}\r\nexport default Card;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}